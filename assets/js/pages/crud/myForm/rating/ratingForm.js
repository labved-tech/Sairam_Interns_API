/* eslint-disable */
'use strict';

// Class definition
const RatingCRUD = (function () {
    const _buttonSpinnerClasses = 'spinner spinner-right spinner-white pr-15';

    // Private functions
    const _createRatingAttributeForm = function () {

        // Getting Document related information
        const createRatingAttributeForm = KTUtil.getById('createRatingAttributeForm');
        const raFormSubmitButton = KTUtil.getById('raFormSubmitButton');
        const raName = KTUtil.getById('raName');
        const raType = KTUtil.getById('raType');
        const raDescription = KTUtil.getById('raDescription');
        const raNotes = KTUtil.getById('raNotes');

        // Initialise
        $(raType).select2({
            placeholder: "Select a Type"
        });

        $(raDescription).summernote({
            height: 400,
            tabsize: 2,
        });


        if (!createRatingAttributeForm) {
            return;
        }

        FormValidation.formValidation(createRatingAttributeForm, {
            fields: {
                raName: {
                    validators: {
                        notEmpty: {
                            message: 'Name is required',
                        },
                    },
                },
                raType: {
                    validators: {
                        notEmpty: {
                            message: 'Type is required',
                        },
                    },
                },
                raDescription: {
                    validators: {
                        callback: {
                            message: 'The content is required and cannot be empty',
                            callback: function (input) {
                                const code = $('[name="raDescription"]').summernote('code');
                                // <p><br></p> is code generated by Summernote for empty content
                                return (code !== '' && code !== '<p><br></p>');
                            }
                        },
                    },
                },
                raNotes: {
                    validators: {
                        notEmpty: {
                            message: 'Notes is required',
                        },
                    },
                },
            },
            plugins: {
                //Learn more: https://formvalidation.io/guide/plugins
                trigger: new FormValidation.plugins.Trigger(),
                // Bootstrap Framework Integration
                bootstrap: new FormValidation.plugins.Bootstrap(),
                // Validate fields when clicking the Submit button
                raFormSubmitButton: new FormValidation.plugins.SubmitButton(),
                // Submit the form when all fields are valid
                //defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
            },
        })
            .on('core.form.valid', function () {
                // Show loading state on button
                KTUtil.btnWait(raFormSubmitButton, _buttonSpinnerClasses, 'Please wait');
                console.log(`Value:${raName.value}`);

                // Accessing Restful API
                axios({
                    method: 'post',
                    url: `${HOST_URL}/api/v1/ratings/attribute`,
                    data: {
                        name: raName.value,
                        type: raType.value,
                        description: $('#raDescription').summernote('code'),
                        notes: raNotes.value,
                    },
                }).then(function (res) {
                    KTUtil.btnRelease(raFormSubmitButton);
                    console.log(res);

                    // TOASTR EXAMPLE
                    toastr.options = {
                        "closeButton": false,
                        "debug": false,
                        "newestOnTop": true,
                        "progressBar": false,
                        "positionClass": "toast-top-right",
                        "preventDuplicates": false,
                        "onclick": null,
                        "showDuration": "300",
                        "hideDuration": "1000",
                        "timeOut": "3000",
                        "extendedTimeOut": "1000",
                        "showEasing": "swing",
                        "hideEasing": "linear",
                        "showMethod": "fadeIn",
                        "hideMethod": "fadeOut"
                    };

                    if (res.data.status == 'success') {
                        toastr.success(`${res.data.message}`, `${res.data.status}`)
                    } else if (res.data.status == 'error') {
                        toastr.error(`${res.data.message}`, `${res.data.status}`)
                    }
                });

            })
            .on('core.form.invalid', function () {
                console.log('Something went wrong!!');

            });

    };

    const _createRatingAttributeGroupsForm = function () {

        // Getting Document related information
        const createRatingAttributeGroupsForm = KTUtil.getById('createRatingAttributeGroupsForm');
        const ragFormSubmitButton = KTUtil.getById('ragFormSubmitButton');
        const ragName = KTUtil.getById('ragName');
        const ragAttributeId = KTUtil.getById('ragAttributeId');
        const ragDescription = KTUtil.getById('ragDescription');
        const ragStatus = KTUtil.getById('ragStatus');

        // Initialise
        $(ragDescription).summernote({
            height: 400,
            tabsize: 2,
        });

        if (!createRatingAttributeGroupsForm) {
            return;
        }

        FormValidation.formValidation(createRatingAttributeGroupsForm, {
            fields: {
                ragName: {
                    validators: {
                        notEmpty: {
                            message: 'Name is required',
                        },
                    },
                },
                ragAttributeId: {
                    validators: {
                        notEmpty: {
                            message: '_attributeId is required',
                        },
                    },
                },
                ragStatus: {
                    validators: {
                        notEmpty: {
                            message: 'Status is required',
                        },
                    },
                },
                ragDescription: {
                    validators: {
                        callback: {
                            message: 'The content is required and cannot be empty',
                            callback: function (input) {
                                const code = $('[name="ragDescription"]').summernote('code');
                                // <p><br></p> is code generated by Summernote for empty content
                                return (code !== '' && code !== '<p><br></p>');
                            }
                        },
                    },
                },
            },
            plugins: {
                //Learn more: https://formvalidation.io/guide/plugins
                trigger: new FormValidation.plugins.Trigger(),
                // Bootstrap Framework Integration
                bootstrap: new FormValidation.plugins.Bootstrap(),
                // Validate fields when clicking the Submit button
                ragFormSubmitButton: new FormValidation.plugins.SubmitButton(),
                // Submit the form when all fields are valid
                //defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
            },
        }).on('core.form.valid', function () {
            KTUtil.btnWait(ragFormSubmitButton, _buttonSpinnerClasses, 'Please wait');
            console.log(`Value:${ragName.value}`);

            // Accessing Restful API
            axios({
                method: 'post',
                url: `${HOST_URL}/api/v1/ratings/attribute/groups`,
                data: {
                    name: ragName.value,
                    _attributeId: ragAttributeId.value,
                    status: ragStatus.value,
                    description: $('#ragDescription').summernote('code'),
                },
            }).then(function (res) {
                KTUtil.btnRelease(ragFormSubmitButton);
                console.log(res);

                // TOASTR EXAMPLE
                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": true,
                    "progressBar": false,
                    "positionClass": "toast-top-right",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "3000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                };

                if (res.data.status == 'success') {
                    toastr.success(`${res.data.message}`, `${res.data.status}`)
                } else if (res.data.status == 'error') {
                    toastr.error(`${res.data.message}`, `${res.data.status}`)
                }
            });

        })
            .on('core.form.invalid', function () {
                console.log('Something went wrong!!');

            });

    };

    const _createRatingEntriesForm = function () {

        // Getting Document related information
        const createRatingEntriesForm = KTUtil.getById('createRatingEntriesForm');
        const reFormSubmitButton = KTUtil.getById('reFormSubmitButton');
        const reRelType = KTUtil.getById('reRelType');
        const reRelId = KTUtil.getById('reRelId');
        const reAttributeId = KTUtil.getById('reRelId');
        const reType = KTUtil.getById('reType');
        const reValue = KTUtil.getById('reValue');
        const reUserId = KTUtil.getById('reUserId');

        // Initialise
        $(reType).select2({
            placeholder: "Select a Type"
        });

        if (!createRatingEntriesForm) {
            return;
        }

        //Repeat Multiple : Commodities Array
        const reMeta = KTUtil.getById('reMeta');

        $('#reMeta').repeater({
            initEmpty: false,

            defaultValues: {
                'text-input': 'foo'
            },

            show: function () {
                $(this).slideDown();
            },

            hide: function (deleteElement) {
                $(this).slideUp(deleteElement);
            }
        });

        FormValidation.formValidation(createRatingEntriesForm, {
            fields: {
                reRelId: {
                    validators: {
                        notEmpty: {
                            message: '_relId is required',
                        },
                    },
                },
                reRelType: {
                    validators: {
                        notEmpty: {
                            message: 'RelType is required',
                        },
                    },
                },
                reAttributeId: {
                    validators: {
                        notEmpty: {
                            message: '_AttributeId is required',
                        },
                    },
                },
                reType: {
                    validators: {
                        notEmpty: {
                            message: 'Type is required',
                        },
                    },
                },
                reValue: {
                    validators: {
                        notEmpty: {
                            message: 'Value is required',
                        },
                    },
                },
                reUserId: {
                    validators: {
                        notEmpty: {
                            message: '_userId is required',
                        },
                    },
                },
            },
            plugins: {
                //Learn more: https://formvalidation.io/guide/plugins
                trigger: new FormValidation.plugins.Trigger(),
                // Bootstrap Framework Integration
                bootstrap: new FormValidation.plugins.Bootstrap(),
                // Validate fields when clicking the Submit button
                reFormSubmitButton: new FormValidation.plugins.SubmitButton(),
                // Submit the form when all fields are valid
                //defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
            },
        }).on('core.form.valid', function () {
            KTUtil.btnWait(createRatingEntriesFormSubmitButton, _buttonSpinnerClasses, 'Please wait');
            console.log(`Value:${reType.value}`);

            // Accessing Restful API
            axios({
                method: 'post',
                url: `${HOST_URL}/api/v1/rating/entries`,
                data: {
                    relType: reRelType.value,
                    relId: reRelId.value,
                    attributeId: reAttributeId.value,
                    type: reType.value,
                    value: reValue.value,
                    userId: reUserId.value

                },
            }).then(function (res) {
                KTUtil.btnRelease(reFormSubmitButton);
                console.log(res);

                // TOASTR EXAMPLE
                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": true,
                    "progressBar": false,
                    "positionClass": "toast-top-right",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "3000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                };

                if (res.data.status == 'success') {
                    toastr.success(`${res.data.message}`, `${res.data.status}`)
                } else if (res.data.status == 'error') {
                    toastr.error(`${res.data.message}`, `${res.data.status}`)
                }
            });

        })
            .on('core.form.invalid', function () {
                console.log('Something went wrong!!');

            });

    };

    return {
        // public functions
        init: function () {
            _createRatingAttributeForm();
            _createRatingAttributeGroupsForm();
            _createRatingEntriesForm();
        }
    }
})();

jQuery(document).ready(function () {
    RatingCRUD.init();
});